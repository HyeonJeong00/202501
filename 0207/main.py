import numpy as np


import numpy as np

# 체스보드 크기 설정 (4x8)
cols = 4  # 열 개수
rows = 8  # 행 개수

# object_points 배열 생성
object_points = np.zeros((rows * cols, 3), dtype=np.float32)

for r in range(rows):  # 행(세로) 방향
    for c in range(cols):  # 열(가로) 방향
        idx = r * cols + c  # 1D 인덱스 계산
        object_points[idx] = [7 - r, c, 0]  # (행은 감소, 열은 증가)

# OpenCV 호환을 위해 (N, 1, 3) 형태로 변환
object_points = object_points

# 출력하여 확인
# print("Object Points Shape:", object_points.shape)  # (32, 1, 3)
# print("\nObject Points:\n", object_points)

# # Object points (3D points)
# object_points = np.array([
#     [0, 0, 0], [1, 0, 0], [2, 0, 0], [3, 0, 0],
#     [0, 1, 0], [1, 1, 0], [2, 1, 0], [3, 1, 0],
#     [0, 2, 0], [1, 2, 0], [2, 2, 0], [3, 2, 0],
#     [0, 3, 0], [1, 3, 0], [2, 3, 0], [3, 3, 0],
#     [0, 4, 0], [1, 4, 0], [2, 4, 0], [3, 4, 0],
#     [0, 5, 0], [1, 5, 0], [2, 5, 0], [3, 5, 0],
#     [0, 6, 0], [1, 6, 0], [2, 6, 0], [3, 6, 0],
#     [0, 7, 0], [1, 7, 0], [2, 7, 0], [3, 7, 0]
# ], dtype=np.float32)

# Image points (2D points)
image_points = np.array([
    [382.48492, 96.906456], [380.36853, 159.60272], [378.03198, 221.97307], [375.5168, 284.0935],
    [320.55902, 99.69174], [318.3758, 159.4883], [316.2924, 218.54422], [314.4107, 277.5559],
    [264.42142, 102.38928], [262.62997, 159.38628], [260.85825, 215.45287], [259.07104, 271.5522],
    [213.42778, 104.69914], [212.10913, 159.1178], [210.55893, 212.72556], [208.86015, 266.36658],
    [166.7278, 106.81466], [165.45967, 158.78719], [164.2826, 210.31364], [162.78249, 261.56433],
    [124.25527, 109.05714], [123.063736, 158.522], [121.93378, 207.89346], [120.83045, 257.03555],
    [85.20374, 110.81499], [84.32268, 158.48764], [83.336395, 205.69835], [82.38091, 252.80568],
    [48.775787, 112.50374], [48.173367, 158.28143], [47.411644, 203.72792], [46.450497, 249.10452]
], dtype=np.float32)

A_rows0 = []
for (x, y, z), (u, v) in zip(object_points, image_points):
    row1 = [x, y, z, 1, 0, 0, 0, 0, -u*x, -u*y, -u*z, -u]
    row2 = [0, 0, 0, 0, x, y, z, 1, -v*x, -v*y, -v*z, -v]
    A_rows0.append(row1)
    A_rows0.append(row2)

A0 = np.array(A_rows0)
U0, S0, Vt0 = np.linalg.svd(A0)     # svd를 사용해서, projection matrix를 구함
print(A0)
print(S0)                        # s는 singular value인데, 0인 경우가 정확한 값이 나온다는 뜻임, 하지만 실제로 찍은 사진(noise와 왜곡..)으로 이를 구하기에 0을 사용하면 안된다...

# print(Vt0)                       # 실제로 값을 출력하면 맨 마지막 행은 0과 -1로만 이루어져 있다. 뒤에서 두번째 행을 사용하자.
print(Vt0[-1])

arr = np.array(Vt0[-1])

# 배열을 3행 4열의 행렬로 재구성
mat = arr.reshape(3, 4)
print("3x4 행렬:")
print(mat)

# 3번째 열(인덱스 2)을 제거하여 3x3 행렬로 만듦
mat_3x3 = np.delete(mat, 2, axis=1)
print("\n3번째 열 제거 후 3x3 행렬:")
print(mat_3x3)

mat_3x3 /= mat_3x3[-1]
print(mat_3x3)